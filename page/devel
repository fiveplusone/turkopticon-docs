# Development

The point of this page is make the following information public:

* [Known issues (bugs, design problems, feature requests, etc.)](#issues)
* [Open questions](#questions)
* [Development tasks](#tasks)
* [Tasks in progress](#in_progress)
* [Development workflow](#workflow)

This page was last updated 5:20 PM PST February 27, 2014.

## <a name="issues"></a> Known issues

### Unprioritized, big questions

* Useless reviews; "at-a-glance" rating no longer trustworthy
* Does moderation need to be redesigned?
* Old reviews should not count the same as new reviews
* Reviewing HITs, not just requesters

### Unprioritized, medium-sized questions

* Moderator queue grows indefinitely; should be silent 'ignore flag' action
* Flagging or otherwise moderating comments

### Highest priority

* Some users don't get verification emails

### High priority

* People often accidentally set display name to default ("s...@g...")
* Can't change attribute score to "N/A"
* Requesters sometimes change names on AMT, causing general confusion

### Medium priority

* Search is buggy
* Would like to get email when new review for a requester is posted
* Would like to get email when review flagged or commented
* Would like to save draft review
* Policies are unclear; policy documents inconsistent and disorganized
* Can't delete account
* Since server move to UCSD, angry requesters complain to UCSD

### Low priority

* Would like to be able to see review after posting, not be sent back to mturk
* Requester list page is slow
* Firefox extension only passes "preliminary review"

## <a name="questions"></a> Open questions

* What should we do about useless reviews? Do we need to redesign moderation? (The second question connects to civility policy too.)
* Is it urgent to flag or otherwise moderate comments? Lilly has volunteered to edit problem comments manually if people email us about them. Is that enough for now?
* What review fields should we add to the review form? Should we let reviewers add their own fields? If so, how should these show up in the extension? Should we do this in stages (for example: add some official new fields, then let people add their own fields later)?
* Should old reviews count less than new reviews? How do we decide the threshold? Should users be able to decide this on their own? If so, what should the default be?
* Is it important to be able to review specific HITs, not just requesters?
* Should we have "profile" pages for requesters? If so, what should go on them? Should requesters be allowed to "claim" these pages somehow (if this is even possible)?
* For moderators:
  * Is it a problem that the list of flagged reviews grows forever? Do we need a silent 'ignore flag' option that makes a flagged review disappear from the list of flagged reviews?
  * Do we need more moderators? How should we pick them?

## <a name="tasks"></a> Development tasks

### High priority issues

* Update extensions
  * Get free SSL certificate for turkopticon.ucsd.edu/api
  * Install SSL certificate
  * Update Chrome extension
  * Update Firefox extension

### Medium priority issues

* Allow subscribing to emails for different events
  * new review for requester
  * review edited
  * new comment or flag on review
* Allow saving draft/tentative reviews
* Allow users to delete own account
  * Change all review ratings to N/A and body text to "The author of this review deleted their account"
  * Change all flag and comment text to "The author of this flag/comment deleted their account"
* Organize policy documents on this site and main site
  * How to review
  * How to flag
  * How moderation works
  * FAQ
  * About
      * What
      * Why
      * Who
* Move to turkopticon.info

### Low priority issues

* Give reviewer option to see own review after posting (not go to AMT)
* Speed up requester list page
* Pass full Mozilla Add-On review
* Speed up Rails app generally
  * Page and fragment caching
  * Optimize slow database queries

### Maybe (open questions)

* Add new fields to review form
  * HIT title
  * HIT description
  * AMZN HIT ID
  * qualifications for HIT
  * HITs available
  * how long did it take to do the HIT?
  * how much did the HIT pay?
      * should be automatically populated
  * did you get rejected?
  * if you got paid, how long did it take?
  * did you try to communicate with the requester?
      * if yes, did they respond adequately?
  * what kind of HIT is it?
  * is the HIT broken?
* Update extension for new fields
* Allow reviewing HITs, not just requesters
* "Profile" pages for requesters
* Add donate button (only accept donations to cover monthly hosting cost)

## <a name="in_progress"></a> Tasks in progress

**Fri Feb 28**

* Update extensions
  * Get free SSL certificate for turkopticon.ucsd.edu/api
  * Install SSL certificate
  * Put user script on github
  * Update Chrome extension
  * Update Firefox extension

**Mon Mar 3&ndash;Wed Mar 5**

* Allow subscribing to emails for different events
* Allow saving draft/tentative reviews
* Allow users to delete own account
* Organize policy documents on this site and main site
* Give reviewer option to see own review after posting (not go to AMT)

**Mon Mar 10&ndash;Wed Mar 12**

* Move to turkopticon.info

**Feb&ndash;Mar 2014 (Jay)**

* Rewrite search in PHP

## <a name="workflow"></a> Development workflow

This workflow can be used to develop new features in the <a href="https://github.com/fiveplusone/turkopticon-rails-app">Turkopticon Rails app</a>. These instructions assume the user has ssh access to quaoar, the machine that hosts turkopticon.info.

For information on branching in git, read <a href="http://git-scm.com/book/en/Git-Branching">Chapter 3, "Git branching", of <em>Pro Git</em> by Scott Chacon</a>. For information on git, read <a href="http://git-scm.com/book/en/Git-Basics">Chapter 2, "Git basics"</a>.

1. Log in to quaoar.
2. <code>cd /home/turkopticon/public/devel.turkopticon.info/turkopticon</code>
3. <code>git branch issueXX</code>, where <code>XX</code> is the number of the <a href="https://github.com/fiveplusone/turkopticon-rails-app/issue">issue</a> the feature aims to address. If there is no issue, either make one or name the branch something descriptive (e.g., <code>let-admins-edit-comments</code>).
4. <code>git checkout issueXX</code>
5. Make changes to files. For example:
<blockquote>
  <code>emacs app/views/layouts/generic.haml</code>
</blockquote>
6. Stage changed files. For example:
<blockquote>
  <code>git add app/views/layouts/generic.haml</code>
</blockquote>
To add all changed files in tree:
<blockquote>
  <code>git add .</code>
</blockquote>
7. Commit changes with descriptive message:
<blockquote>
  <code>git commit -m 'descriptive message'</code>
</blockquote>
Use the syntax "fixes #XX" if the changes in the commit close issue XX; e.g.:
<blockquote>
  <code>git commit -m 'descriptive message; fixes #34'</code>
</blockquote>
8. To test, restart the app while this branch is checked out (<code>touch tmp/restart.txt</code>).
9. Once complete and tested, merge the branch into <code>devel</code>:
<blockquote>
  <code>git checkout devel</code><br/>
  <code>git merge issueXX</code>
</blockquote>
10. Restart the app again to make sure the merge worked and didn't break anything (<code>touch tmp/restart.txt</code>).
11. Delete the feature branch:
<blockquote>
  <code>git branch -d issueXX</code>
</blockquote>
12. Push to the github repository:
<blockquote>
  <code>git push origin devel</code>
</blockquote>

The changes can be merged into <code>master</code> through the github interface or in a local repository (and then pushed to the github repository). After merging changes, restart the application to make them live.