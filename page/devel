# Development

The point of this page is make the following information public:

* [Known issues (bugs, design problems, feature requests, etc.)](#issues)
* [Development tasks](#tasks)
* [Tasks in progress](#in_progress)
* [Development workflow](#workflow)

This page was last updated 5:35 PM PST February 20, 2014.

## <a name="issues"></a> Known issues

* JSON.parse errors for some Firefox users
* Extension sometimes slow in both Firefox and Chrome
* Useless reviews; "at-a-glance" rating no longer trustworthy
* Since server move to UCSD, angry requesters complain to UCSD
* Some users don't get verification emails
* Search is buggy
* Requester list page is slow
* Firefox extension only passes "preliminary review"
* Can't change attribute score to "N/A"
* Can't edit own comments
* Can't delete own comments
* Can't delete own reviews
* Can't delete account
* Requesters sometimes change names on AMT, causing general confusion
* Would like to flag or otherwise moderate comments
* Would like to get email when new review for a requester is posted
* Would like to get email when review flagged or commented
* Would like to save draft review
* Would like to be able to see review after posting, not be sent back to mturk
* People often accidentally set display name to default ("s...@g...")
* Moderator queue grows indefinitely; should be silent 'ignore flag' action
* Policies are unclear; policy documents inconsistent and disorganized
* Moderation needs to be redesigned
* Old reviews should not count the same as new reviews (maybe)

## <a name="tasks"></a> Development tasks

### Live

* [Project] Move to turkopticon.info (Linode server "quaoar")
  * Aims to directly address issues:
      * JSON.parse errors for some Firefox users
          * Caused by BlueHost/UCSD server overload/slowness
      * Extension sometimes slow in both Firefox and Chrome
          * Caused by BlueHost/UCSD server overload/slowness
      * Since server move to UCSD, angry requesters complain to UCSD
          * Caused by the fact that UCSD server is owned by UCSD
  * Aims to create the conditions of possibility to address issues:
      * Useless reviews; "at-a-glance" rating no longer trustworthy
          * After moving to new server, we will be able to make a development sandbox
  * Tasks for this project:
      * <strike>Get production Rails application working on turkopticon.info [6 h]</strike>
      * <strike>Set up email sending from quaoar [3 h]</strike>
          * <strike>for Rails app, can use gmail (turkopticon.maint@gmail)</strike>
          * <strike>configure and test sendmail for crontab use</strike>
      * <strike>Create development "sandbox" at devel.turkopticon.info [1 h]</strike>
      * Use git/github for version control [6 h]
          * <strike>api.turkopticon.info</strike>
          * devel.api.turkopticon.info
          * <strike>turkopticon.info</strike>
          * <strike>devel.turkopticon.info</strike>
          * docs.turkopticon.info
      * Move PHP API
          * <strike>Make sure all PHP files are in place and most recent versions [30 m]</strike>
          * <strike>Replicate UCSD production database on quaoar</strike> [failed]
          * <strike>Make sure API log will not grow indefinitely [30 m]</strike>
          * Set up SSL
              * Buy SSL certificate [30 m]
              * Set up SSL certificate (serve data to extension over HTTPS) [1 h]
      * Make new version of user.js that calls api.turkopticon.info over HTTPS [30 m]
      * Post new user.js to turkopticon-discuss with install info [30 m]
      * Update extensions
          * Firefox extension (with new framework, not Greasemonkey) [3 h]
          * Chrome extension [3 h]
              * <strike>Transfer ownership to turkopticon.maint@gmail</strike>
      * Create and document development workflow [3 h]
      * Set up tools to monitor server load [6 h]
      * Turn off Rails apps on UCSD server (301) [3 h]
      * <strike>Remove horrific warning on turkopticon.info</strike>

### Backlog

* Associate requester name with review, not just requester object
  * This keeps track of requesters' old names while allowing reviewers to review them under their new names
  * create requester name field in reports table
  * get requester name from reports table (if exists) in _report.haml
  * populate 'report your experience' link in user.js from AMT page, not API
  * replace links to extensions on home page with links to user.js and info
  * log user.js downloads
  * rotate user.js download log / summarize stats
* Reviewer should be able to change attribute score to "N/A"
* Add new fields to review form
  * HIT title
  * HIT description
  * AMZN HIT ID
  * qualifications for HIT
  * HITs available
  * how long did it take to do the HIT?
  * how much did the HIT pay?
      * should be automatically populated
  * did you get rejected?
  * if you got paid, how long did it take?
  * did you try to communicate with the requester?
      * if yes, did they respond adequately?
  * what kind of HIT is it?
  * is the HIT broken?
* Update extension for new fields
* <strike>Allow editing own comments</strike>
* Allow deleting own reviews
* Allow deleting account
* Allow subscribing to emails for different events
  * new review for requester
  * review edited
  * new comment or flag on review
* Save draft/tentative reviews
* Allow user to unset display name if display name is default
* Allow reviewing HITs, not just requesters
* "Profile" pages for requesters
* Improve search
* Distribute moderation load more evenly (revamp moderation)
  * Moderate comments as well as reviews
* Speed up or drop requester list page
* Give reviewer option to see own review after posting (not go to AMT)
* Pass full review in Mozilla Add-On Directory
* Make code open source
* Speed up Rails app
  * page/fragment caching
  * optimize slow DB queries
* Add donate button (only accept donations to cover monthly hosting cost)

### Maybe

* Create version of extension with local copy of database

## <a name="in_progress"></a> Tasks in progress

**Thu Feb 20**

* Document development workflow on this site
* Let administrators edit comments
* Let users edit own comments
* When a user or admin edits a review, a notice with timestamp should be added
  * It should not be possible to remove this notice
  * Notices should accumulate in a reasonable way if a review is edited multiple times
* When a user or admin edits a comment, a notice with timestamp should be added (not removable, should accumulate reasonably)

## <a name="workflow"></a> Development workflow

This workflow can be used to develop new features in the <a href="https://github.com/fiveplusone/turkopticon-rails-app">Turkopticon Rails app</a>. These instructions assume the user has ssh access to quaoar, the machine that hosts turkopticon.info.

For information on branching in git, read <a href="http://git-scm.com/book/en/Git-Branching">Chapter 3, "Git branching", of <em>Pro Git</em> by Scott Chacon</a>. For information on git, read <a href="http://git-scm.com/book/en/Git-Basics">Chapter 2, "Git basics"</a>.

1. Log in to quaoar.
2. <code>cd /home/turkopticon/public/devel.turkopticon.info/turkopticon</code>
3. <code>git branch issueXX</code>, where <code>XX</code> is the number of the <a href="https://github.com/fiveplusone/turkopticon-rails-app/issue">issue</a> the feature aims to address. If there is no issue, either make one or name the branch something descriptive (e.g., <code>let-admins-edit-comments</code>).
4. <code>git checkout issueXX</code>
5. Make and commit changes.
6. To test, restart the app while this branch is checked out (<code>touch tmp/restart.txt</code>).
7. Once complete and tested, merge the branch into <code>devel</code>:
<blockquote>
  <code>git checkout devel</code><br/>
  <code>git merge issueXX</code>
</blockquote>
8. Restart the app again to make sure the merge worked and didn't break anything (<code>touch tmp/restart.txt</code>).
9. Delete the feature branch:
<blockquote>
  <code>git branch -d issueXX</code>
</blockquote>
10. Push to the github repository:
<blockquote>
  <code>git push origin devel</code>
</blockquote>

The changes can be merged into <code>master</code> through the github interface or in a local repository (and then pushed to the github repository). After merging changes, restart the application to make them live.